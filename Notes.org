#+TITLE: Notes About Camp
#+AUTHOR: Chris Bilson
#+EMAIL: cbilson@pobox.com
#+OPTIONS: toc:3 num:nil
#+STYLE: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />

* Features
  
** DONE new command                                                  :v0_1_0:
   CLOSED: [2015-02-18 Wed 08:36]
   
   #+BEGIN_SRC shell
   $ camp new myapp
   #+END_SRC
   
   This should:
   - create a new directory
   - add a .gitignore
   - add a project.clj
     - includes lein-esque deps
   - add src/myapp/core.clj
     
** DONE deps command                                               :v1_0_1_0:
   CLOSED: [2015-02-18 Wed 08:36]
   - fetch deps from nuget
   - be able to gather all target framework compatible libs, content,
     and tools.
     
   #+BEGIN_SRC shell
   $ camp deps
   #+END_SRC
   
** DONE compile command						    :v_0_1_0:
   CLOSED: [2015-02-21 Sat 08:54]
   - fetch deps in not already there
     - Oops, forgot about this part. I'll get to it later.
   - construct a Clojure.Compiler command line
   - output goes in targets dir
     
   #+BEGIN_SRC shell
   $ camp compile
   #+END_SRC
   
** DONE fix compile task to check deps				:v_0_1_0:bug:
   CLOSED: [2015-02-21 Sat 11:31]
   
** WIP License							    :v_0_1_0:
   - Need to check with MSOT
     
** DONE README.md						    :v_0_1_0:
   CLOSED: [2015-02-27 Fri 08:25]
   - Give vision
   - Show example
   - Mention road map

** DONE Packaging
   CLOSED: [2015-02-27 Fri 08:25]
   - nuget package
     - update: I actually don't think this is necessary. Choco package
       is needed anyway, and consists of a nuget package already.
   - chocolatey package
     - This is easy and will add a lot of value in not making people
       have to futz with their PATH.

** TODO Announce						    :v_0_1_0:
   - screen casts
   - clojure-clr google group
   - twitter
   - seajure
   - reddit
   - lobste.rs/hackernews, ...
     
** BACKLOG Camp always compiles with clojure it was compiled with :bug:v_0_1_1:
   - It's going to pick up the Clojure.dll in the camp.exe directory.
   - Maybe switch to doing something like what the camp build script does,
     where tools are copied into a working directory from deps, and use
     the Clojure.Compiler.exe from deps?

** BACKLOG Tests for camp itself 				    :v_0_1_1:
   - Try different testing libs and see which one works.
   - Strategy: 0.1.0 is a spike. Need to think about maintenance from
     0.1.1 on wards.

** BACKLOG clean task   :v_0_1_1:
** BACKLOG repl                                                      :v_0_1_1:
   - just fire up a repl with the project loaded for now.

** BACKLOG nrepl                                                     :v_0_1_2:
   - read somewhere that it "almost works"

** BACKLOG templates                                                 :v_0_1_3:
   - I like the way leiningen templates work. Something like that...

** BACKLOG test task :v_0_1_3:
   - based on experience with lein test and whatever I learn doing
     tests for camp itself.

** BACKLOG assembly merging                                          :v_0_1_4:
   - ILMerge has issues.
   - Maybe try Jeffery Richter idea
     - have a stub EXE with assemblies embedded as resources
     - there was some problem with that, though, too, AFAIR.

** BACKLOG assembly attributes                                       :v_0_1_4:
   - Especially version attributes
   - [[https://groups.google.com/forum/#!topic/clojure-clr/MgomkqFzP0k][Looks like it might be a pain]].
   - Check with MSOT: if I can sign contrib agreement, maybe just send
     a patch.
   - But then I'm dependent on a future release of ClojureCLR nuget
     package.
     
** BACKLOG resources                                                 :v_0_1_4:
   Need a way to embed resources in assemblies.
   - resource compiler
   - lots of JVM projects depend on resources and I imagine CLR ones
     will too.

** BACKLOG run task
   - Is it even needed?
   - Should be pretty simple to get going.

** BACKLOG Mono?
   - This is probably really important
   - Just don't do anything that won't run on mono - keep it simple.
   - Less worried about building camp itself on mono.
   - Research how platform works in nuget with mono
     - Maybe making some bad assumptions in deps.clj?

** BACKLOG plug-ins

** BACKLOG compiling other languages
   - C#, F#
   - Similar to how leiningen compiles java

** BACKLOG profiles


* Ideas

** Camping Metaphor

*** Winnebago or One-Person Tent
    - You can go crazy and :require all the things (Winnebago), or
      travel light and keep it simple.

*** Base Camp
    - You can create one project, then take what you want for it and
      go on up the mountain to the next project, establishing a new
      camp.
    - Mountaineering with a base camp and camp I, camp II, ...
      - Vague...I am really thinking about being able to quickly
        re-use assets (think: "I have bootstrap over there
        already. Just use that!", or "On a plane. Can't restore
        packages. Please re-use package I already downloaded over
        there.", like maven.)
    - Also like the George Carlin sketch about going to Honolulu with
      a bunch of stuff, then taking less stuff for a couple of days to
      Maui, then even less stuff somewhere else...

*** Camping is just fun


** eval-in-project
   - Leverage app domains to make it easier to eval-in-project


* Notes
  
** Clojure Compiler
   
   - [[http://clojureclr.blogspot.com/2012/01/compiling-and-loading-in-clojureclr.html][Compiling and loading in ClojureCLR]]
   - `clojure.core/compile' calls /load, then eventually,
     `clojure.lang.RT/load'.
     - clojure.core/compile also binds *compile-files* true.
   - If the .clj file is newer than the .clj.dll, it compiles the source file.
   - It looks at `Compiler.CompileFilesVar.' to determine if it wants to 
     Compile or LoadScript.
   - The clojure symbol for CompileFilesVar is
     `clojure.core/*compile-files*' and it defaults to false.
   - Eventually this makes it's way to clojure.lang.Compiler.Compile.
   - This uses a GenContext, a TypeBuilder, and a CljILGen to generate
     IL into the context, then finally save it to an assembly with
     GenContext::SaveAssembly.
   - GenContext::SaveAssembly uses the DLR to actually write out the assembly.
   - *compile-path* is where the assemblies go, _not_ where it expects to
     find src files.
   - When looking for source files, the compiler looks at the environment
     variable CLOJURE_LOAD_PATH, in addition to a bunch of other places.
     - CLOJURE_LOAD_PATH can contain multiple paths delimited by
       Path.PathSeparator.
   - clojure.core/*compiler-options*
     - {:elide-meta #{:some-key :some-other-key}
        :disable-locals-clearing true|false{}

** NGen
   - I would hate working on this if I hadn't NGen'd
     Clojure.Compile...so fast!
   - [[https://groups.google.com/forum/#!searchin/clojure-clr/compile/clojure-clr/LbzsUoJe_h8/Q2Ht3sezQZsJ][x64 vs. x32]]

** ClojureScript
   - If we make a nuget package for it, we could make a camp task to
     compile ClojureScript.

** How I work on camp

*** 2014-02-18

   - In emacs, with projectile, clojure-mode
   - I have my compile command set to something like:
     
     #+BEGIN_SRC shell
     msbuild /t:CampExe /verbosity:minimal && targets\camp.main.exe ...
     #+END_SRC

   - When I was making the new task, I created a scratch project like:

     #+BEGIN_SRC shell
     targets\camp.main.exe new scratch-project
     #+END_SRC

   - For other tasks, I just cd into the scratch project and run camp
     out of targets. Like right now, working on compile task:

     #+BEGIN_SRC shell
       msbuild /t:CampExe /verbosity:minimal && \
         cd scratch-project && \
         ..\targets\camp.main.exe compile
     #+END_SRC

   - With the NGen'd compiler being so fast, I have been using println
     debugging and just looking at the *compilation* buffer
     output. That has been working pretty well so far.
   - Many times, I've really wanted to use a repl, though.
     - I don't know how well nrepl works with ClojureCLR yet, but it's
       on my TODO list to investigate this.
     - I'm not that interested in a plain-old REPL, I want to be able
       to use the REPL in emacs and eval forms while I am working.

*** 2014-02-21
    I added build targets for testing, so "msbuild /verbosity:minimal /t:TestCompile", etc.
